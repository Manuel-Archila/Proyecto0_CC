# Generated from ./yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,302,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
        11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
        27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,
        30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,
        35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,
        37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,
        40,1,40,1,41,1,41,1,41,1,41,5,41,246,8,41,10,41,12,41,249,9,41,1,
        42,1,42,1,42,1,42,5,42,255,8,42,10,42,12,42,258,9,42,1,43,1,43,5,
        43,262,8,43,10,43,12,43,265,9,43,1,43,1,43,1,44,1,44,1,44,1,44,5,
        44,273,8,44,10,44,12,44,276,9,44,1,44,1,44,1,45,1,45,1,45,1,45,5,
        45,284,8,45,10,45,12,45,287,9,45,1,45,1,45,1,45,1,45,1,45,1,46,4,
        46,295,8,46,11,46,12,46,296,1,46,1,46,1,47,1,47,2,263,285,0,48,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
        47,95,48,1,0,22,1,0,48,57,2,0,67,67,99,99,2,0,76,76,108,108,2,0,
        65,65,97,97,2,0,83,83,115,115,2,0,69,69,101,101,2,0,70,70,102,102,
        2,0,73,73,105,105,2,0,78,78,110,110,2,0,72,72,104,104,2,0,82,82,
        114,114,2,0,84,84,116,116,2,0,86,86,118,118,2,0,79,79,111,111,2,
        0,68,68,100,100,2,0,80,80,112,112,2,0,87,87,119,119,1,0,65,90,2,
        0,65,90,97,122,1,0,97,122,2,0,10,10,13,13,3,0,9,10,12,13,32,32,311,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,99,1,0,0,0,5,101,
        1,0,0,0,7,103,1,0,0,0,9,105,1,0,0,0,11,107,1,0,0,0,13,109,1,0,0,
        0,15,111,1,0,0,0,17,113,1,0,0,0,19,115,1,0,0,0,21,117,1,0,0,0,23,
        120,1,0,0,0,25,123,1,0,0,0,27,125,1,0,0,0,29,128,1,0,0,0,31,130,
        1,0,0,0,33,132,1,0,0,0,35,134,1,0,0,0,37,136,1,0,0,0,39,138,1,0,
        0,0,41,140,1,0,0,0,43,142,1,0,0,0,45,144,1,0,0,0,47,146,1,0,0,0,
        49,151,1,0,0,0,51,161,1,0,0,0,53,167,1,0,0,0,55,172,1,0,0,0,57,178,
        1,0,0,0,59,183,1,0,0,0,61,186,1,0,0,0,63,189,1,0,0,0,65,192,1,0,
        0,0,67,201,1,0,0,0,69,208,1,0,0,0,71,213,1,0,0,0,73,218,1,0,0,0,
        75,223,1,0,0,0,77,229,1,0,0,0,79,233,1,0,0,0,81,237,1,0,0,0,83,241,
        1,0,0,0,85,250,1,0,0,0,87,259,1,0,0,0,89,268,1,0,0,0,91,279,1,0,
        0,0,93,294,1,0,0,0,95,300,1,0,0,0,97,98,7,0,0,0,98,2,1,0,0,0,99,
        100,5,46,0,0,100,4,1,0,0,0,101,102,5,64,0,0,102,6,1,0,0,0,103,104,
        5,126,0,0,104,8,1,0,0,0,105,106,5,42,0,0,106,10,1,0,0,0,107,108,
        5,47,0,0,108,12,1,0,0,0,109,110,5,43,0,0,110,14,1,0,0,0,111,112,
        5,45,0,0,112,16,1,0,0,0,113,114,5,60,0,0,114,18,1,0,0,0,115,116,
        5,62,0,0,116,20,1,0,0,0,117,118,5,62,0,0,118,119,5,61,0,0,119,22,
        1,0,0,0,120,121,5,60,0,0,121,122,5,61,0,0,122,24,1,0,0,0,123,124,
        5,61,0,0,124,26,1,0,0,0,125,126,5,60,0,0,126,127,5,45,0,0,127,28,
        1,0,0,0,128,129,5,40,0,0,129,30,1,0,0,0,130,131,5,41,0,0,131,32,
        1,0,0,0,132,133,5,58,0,0,133,34,1,0,0,0,134,135,5,59,0,0,135,36,
        1,0,0,0,136,137,5,123,0,0,137,38,1,0,0,0,138,139,5,125,0,0,139,40,
        1,0,0,0,140,141,5,44,0,0,141,42,1,0,0,0,142,143,5,91,0,0,143,44,
        1,0,0,0,144,145,5,93,0,0,145,46,1,0,0,0,146,147,5,115,0,0,147,148,
        5,101,0,0,148,149,5,108,0,0,149,150,5,102,0,0,150,48,1,0,0,0,151,
        152,5,83,0,0,152,153,5,69,0,0,153,154,5,76,0,0,154,155,5,70,0,0,
        155,156,5,95,0,0,156,157,5,84,0,0,157,158,5,89,0,0,158,159,5,80,
        0,0,159,160,5,69,0,0,160,50,1,0,0,0,161,162,5,102,0,0,162,163,5,
        97,0,0,163,164,5,108,0,0,164,165,5,115,0,0,165,166,5,101,0,0,166,
        52,1,0,0,0,167,168,5,116,0,0,168,169,5,114,0,0,169,170,5,117,0,0,
        170,171,5,101,0,0,171,54,1,0,0,0,172,173,7,1,0,0,173,174,7,2,0,0,
        174,175,7,3,0,0,175,176,7,4,0,0,176,177,7,4,0,0,177,56,1,0,0,0,178,
        179,7,5,0,0,179,180,7,2,0,0,180,181,7,4,0,0,181,182,7,5,0,0,182,
        58,1,0,0,0,183,184,7,6,0,0,184,185,7,7,0,0,185,60,1,0,0,0,186,187,
        7,7,0,0,187,188,7,6,0,0,188,62,1,0,0,0,189,190,7,7,0,0,190,191,7,
        8,0,0,191,64,1,0,0,0,192,193,7,7,0,0,193,194,7,8,0,0,194,195,7,9,
        0,0,195,196,7,5,0,0,196,197,7,10,0,0,197,198,7,7,0,0,198,199,7,11,
        0,0,199,200,7,4,0,0,200,66,1,0,0,0,201,202,7,7,0,0,202,203,7,4,0,
        0,203,204,7,12,0,0,204,205,7,13,0,0,205,206,7,7,0,0,206,207,7,14,
        0,0,207,68,1,0,0,0,208,209,7,2,0,0,209,210,7,13,0,0,210,211,7,13,
        0,0,211,212,7,15,0,0,212,70,1,0,0,0,213,214,7,15,0,0,214,215,7,13,
        0,0,215,216,7,13,0,0,216,217,7,2,0,0,217,72,1,0,0,0,218,219,7,11,
        0,0,219,220,7,9,0,0,220,221,7,5,0,0,221,222,7,8,0,0,222,74,1,0,0,
        0,223,224,7,16,0,0,224,225,7,9,0,0,225,226,7,7,0,0,226,227,7,2,0,
        0,227,228,7,5,0,0,228,76,1,0,0,0,229,230,7,8,0,0,230,231,7,5,0,0,
        231,232,7,16,0,0,232,78,1,0,0,0,233,234,7,8,0,0,234,235,7,13,0,0,
        235,236,7,11,0,0,236,80,1,0,0,0,237,238,7,2,0,0,238,239,7,5,0,0,
        239,240,7,11,0,0,240,82,1,0,0,0,241,247,7,17,0,0,242,246,7,18,0,
        0,243,246,3,1,0,0,244,246,5,95,0,0,245,242,1,0,0,0,245,243,1,0,0,
        0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,
        0,248,84,1,0,0,0,249,247,1,0,0,0,250,256,7,19,0,0,251,255,7,18,0,
        0,252,255,3,1,0,0,253,255,5,95,0,0,254,251,1,0,0,0,254,252,1,0,0,
        0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,
        0,257,86,1,0,0,0,258,256,1,0,0,0,259,263,5,34,0,0,260,262,9,0,0,
        0,261,260,1,0,0,0,262,265,1,0,0,0,263,264,1,0,0,0,263,261,1,0,0,
        0,264,266,1,0,0,0,265,263,1,0,0,0,266,267,5,34,0,0,267,88,1,0,0,
        0,268,269,5,45,0,0,269,270,5,45,0,0,270,274,1,0,0,0,271,273,8,20,
        0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,
        0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,278,6,44,0,0,278,90,1,0,
        0,0,279,280,5,40,0,0,280,281,5,42,0,0,281,285,1,0,0,0,282,284,9,
        0,0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,286,1,0,0,0,285,283,1,
        0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,289,5,42,0,0,289,290,5,
        41,0,0,290,291,1,0,0,0,291,292,6,45,0,0,292,92,1,0,0,0,293,295,7,
        21,0,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,
        0,0,0,297,298,1,0,0,0,298,299,6,46,0,0,299,94,1,0,0,0,300,301,9,
        0,0,0,301,96,1,0,0,0,9,0,245,247,254,256,263,274,285,296,1,6,0,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DIGIT = 1
    DOT = 2
    AT = 3
    DIAC = 4
    TIMES = 5
    DIVIDE = 6
    PLUS = 7
    MINUS = 8
    LT = 9
    RT = 10
    RE = 11
    LE = 12
    EQUALS = 13
    ASSIGN = 14
    LPAR = 15
    RPAR = 16
    COLON = 17
    SEMICOLON = 18
    LBRACE = 19
    RBRACE = 20
    COMMA = 21
    LSQUARE = 22
    RSQUARE = 23
    SELF = 24
    SELF_TYPE = 25
    FALSE = 26
    TRUE = 27
    CLASS = 28
    ELSE = 29
    FI = 30
    IF = 31
    IN = 32
    INHERITS = 33
    ISVOID = 34
    LOOP = 35
    POOL = 36
    THEN = 37
    WHILE = 38
    NEW = 39
    NOT = 40
    LET = 41
    TYPE = 42
    ID = 43
    STRING = 44
    COMMENT = 45
    CLOSED_COMMENT = 46
    WHITESPACE = 47
    ERROR = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'@'", "'~'", "'*'", "'/'", "'+'", "'-'", "'<'", "'>'", 
            "'>='", "'<='", "'='", "'<-'", "'('", "')'", "':'", "';'", "'{'", 
            "'}'", "','", "'['", "']'", "'self'", "'SELF_TYPE'", "'false'", 
            "'true'" ]

    symbolicNames = [ "<INVALID>",
            "DIGIT", "DOT", "AT", "DIAC", "TIMES", "DIVIDE", "PLUS", "MINUS", 
            "LT", "RT", "RE", "LE", "EQUALS", "ASSIGN", "LPAR", "RPAR", 
            "COLON", "SEMICOLON", "LBRACE", "RBRACE", "COMMA", "LSQUARE", 
            "RSQUARE", "SELF", "SELF_TYPE", "FALSE", "TRUE", "CLASS", "ELSE", 
            "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", "POOL", "THEN", 
            "WHILE", "NEW", "NOT", "LET", "TYPE", "ID", "STRING", "COMMENT", 
            "CLOSED_COMMENT", "WHITESPACE", "ERROR" ]

    ruleNames = [ "DIGIT", "DOT", "AT", "DIAC", "TIMES", "DIVIDE", "PLUS", 
                  "MINUS", "LT", "RT", "RE", "LE", "EQUALS", "ASSIGN", "LPAR", 
                  "RPAR", "COLON", "SEMICOLON", "LBRACE", "RBRACE", "COMMA", 
                  "LSQUARE", "RSQUARE", "SELF", "SELF_TYPE", "FALSE", "TRUE", 
                  "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", 
                  "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", 
                  "TYPE", "ID", "STRING", "COMMENT", "CLOSED_COMMENT", "WHITESPACE", 
                  "ERROR" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


