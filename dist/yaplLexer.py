# Generated from yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,305,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
        27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
        38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,249,8,42,10,42,12,
        42,252,9,42,1,43,1,43,1,43,1,43,5,43,258,8,43,10,43,12,43,261,9,
        43,1,44,1,44,5,44,265,8,44,10,44,12,44,268,9,44,1,44,1,44,1,45,1,
        45,1,45,1,45,5,45,276,8,45,10,45,12,45,279,9,45,1,45,1,45,1,46,1,
        46,1,46,1,46,5,46,287,8,46,10,46,12,46,290,9,46,1,46,1,46,1,46,1,
        46,1,46,1,47,4,47,298,8,47,11,47,12,47,299,1,47,1,47,1,48,1,48,2,
        266,288,0,49,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,1,0,22,1,0,48,57,1,0,65,90,1,0,97,
        122,2,0,65,90,97,122,2,0,67,67,99,99,2,0,76,76,108,108,2,0,65,65,
        97,97,2,0,83,83,115,115,2,0,69,69,101,101,2,0,70,70,102,102,2,0,
        73,73,105,105,2,0,78,78,110,110,2,0,72,72,104,104,2,0,82,82,114,
        114,2,0,84,84,116,116,2,0,86,86,118,118,2,0,79,79,111,111,2,0,68,
        68,100,100,2,0,80,80,112,112,2,0,87,87,119,119,2,0,10,10,13,13,3,
        0,9,10,12,13,32,32,314,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
        0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
        0,0,0,1,99,1,0,0,0,3,101,1,0,0,0,5,103,1,0,0,0,7,105,1,0,0,0,9,107,
        1,0,0,0,11,109,1,0,0,0,13,111,1,0,0,0,15,113,1,0,0,0,17,115,1,0,
        0,0,19,117,1,0,0,0,21,119,1,0,0,0,23,121,1,0,0,0,25,123,1,0,0,0,
        27,126,1,0,0,0,29,128,1,0,0,0,31,131,1,0,0,0,33,133,1,0,0,0,35,135,
        1,0,0,0,37,137,1,0,0,0,39,139,1,0,0,0,41,141,1,0,0,0,43,143,1,0,
        0,0,45,145,1,0,0,0,47,147,1,0,0,0,49,149,1,0,0,0,51,154,1,0,0,0,
        53,164,1,0,0,0,55,170,1,0,0,0,57,175,1,0,0,0,59,181,1,0,0,0,61,186,
        1,0,0,0,63,189,1,0,0,0,65,192,1,0,0,0,67,195,1,0,0,0,69,204,1,0,
        0,0,71,211,1,0,0,0,73,216,1,0,0,0,75,221,1,0,0,0,77,226,1,0,0,0,
        79,232,1,0,0,0,81,236,1,0,0,0,83,240,1,0,0,0,85,244,1,0,0,0,87,253,
        1,0,0,0,89,262,1,0,0,0,91,271,1,0,0,0,93,282,1,0,0,0,95,297,1,0,
        0,0,97,303,1,0,0,0,99,100,7,0,0,0,100,2,1,0,0,0,101,102,7,1,0,0,
        102,4,1,0,0,0,103,104,7,2,0,0,104,6,1,0,0,0,105,106,7,3,0,0,106,
        8,1,0,0,0,107,108,5,46,0,0,108,10,1,0,0,0,109,110,5,64,0,0,110,12,
        1,0,0,0,111,112,5,126,0,0,112,14,1,0,0,0,113,114,5,42,0,0,114,16,
        1,0,0,0,115,116,5,47,0,0,116,18,1,0,0,0,117,118,5,43,0,0,118,20,
        1,0,0,0,119,120,5,45,0,0,120,22,1,0,0,0,121,122,5,60,0,0,122,24,
        1,0,0,0,123,124,5,60,0,0,124,125,5,61,0,0,125,26,1,0,0,0,126,127,
        5,61,0,0,127,28,1,0,0,0,128,129,5,60,0,0,129,130,5,45,0,0,130,30,
        1,0,0,0,131,132,5,40,0,0,132,32,1,0,0,0,133,134,5,41,0,0,134,34,
        1,0,0,0,135,136,5,58,0,0,136,36,1,0,0,0,137,138,5,59,0,0,138,38,
        1,0,0,0,139,140,5,123,0,0,140,40,1,0,0,0,141,142,5,125,0,0,142,42,
        1,0,0,0,143,144,5,44,0,0,144,44,1,0,0,0,145,146,5,91,0,0,146,46,
        1,0,0,0,147,148,5,93,0,0,148,48,1,0,0,0,149,150,5,115,0,0,150,151,
        5,101,0,0,151,152,5,108,0,0,152,153,5,102,0,0,153,50,1,0,0,0,154,
        155,5,83,0,0,155,156,5,69,0,0,156,157,5,76,0,0,157,158,5,70,0,0,
        158,159,5,95,0,0,159,160,5,84,0,0,160,161,5,89,0,0,161,162,5,80,
        0,0,162,163,5,69,0,0,163,52,1,0,0,0,164,165,5,102,0,0,165,166,5,
        97,0,0,166,167,5,108,0,0,167,168,5,115,0,0,168,169,5,101,0,0,169,
        54,1,0,0,0,170,171,5,116,0,0,171,172,5,114,0,0,172,173,5,117,0,0,
        173,174,5,101,0,0,174,56,1,0,0,0,175,176,7,4,0,0,176,177,7,5,0,0,
        177,178,7,6,0,0,178,179,7,7,0,0,179,180,7,7,0,0,180,58,1,0,0,0,181,
        182,7,8,0,0,182,183,7,5,0,0,183,184,7,7,0,0,184,185,7,8,0,0,185,
        60,1,0,0,0,186,187,7,9,0,0,187,188,7,10,0,0,188,62,1,0,0,0,189,190,
        7,10,0,0,190,191,7,9,0,0,191,64,1,0,0,0,192,193,7,10,0,0,193,194,
        7,11,0,0,194,66,1,0,0,0,195,196,7,10,0,0,196,197,7,11,0,0,197,198,
        7,12,0,0,198,199,7,8,0,0,199,200,7,13,0,0,200,201,7,10,0,0,201,202,
        7,14,0,0,202,203,7,7,0,0,203,68,1,0,0,0,204,205,7,10,0,0,205,206,
        7,7,0,0,206,207,7,15,0,0,207,208,7,16,0,0,208,209,7,10,0,0,209,210,
        7,17,0,0,210,70,1,0,0,0,211,212,7,5,0,0,212,213,7,16,0,0,213,214,
        7,16,0,0,214,215,7,18,0,0,215,72,1,0,0,0,216,217,7,18,0,0,217,218,
        7,16,0,0,218,219,7,16,0,0,219,220,7,5,0,0,220,74,1,0,0,0,221,222,
        7,14,0,0,222,223,7,12,0,0,223,224,7,8,0,0,224,225,7,11,0,0,225,76,
        1,0,0,0,226,227,7,19,0,0,227,228,7,12,0,0,228,229,7,10,0,0,229,230,
        7,5,0,0,230,231,7,8,0,0,231,78,1,0,0,0,232,233,7,11,0,0,233,234,
        7,8,0,0,234,235,7,19,0,0,235,80,1,0,0,0,236,237,7,11,0,0,237,238,
        7,16,0,0,238,239,7,14,0,0,239,82,1,0,0,0,240,241,7,5,0,0,241,242,
        7,8,0,0,242,243,7,14,0,0,243,84,1,0,0,0,244,250,3,3,1,0,245,249,
        3,7,3,0,246,249,3,1,0,0,247,249,5,95,0,0,248,245,1,0,0,0,248,246,
        1,0,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,
        1,0,0,0,251,86,1,0,0,0,252,250,1,0,0,0,253,259,3,5,2,0,254,258,3,
        7,3,0,255,258,3,1,0,0,256,258,5,95,0,0,257,254,1,0,0,0,257,255,1,
        0,0,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,
        0,0,0,260,88,1,0,0,0,261,259,1,0,0,0,262,266,5,34,0,0,263,265,9,
        0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,267,1,0,0,0,266,264,1,
        0,0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,270,5,34,0,0,270,90,1,
        0,0,0,271,272,5,45,0,0,272,273,5,45,0,0,273,277,1,0,0,0,274,276,
        8,20,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,
        1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,6,45,0,0,281,92,
        1,0,0,0,282,283,5,40,0,0,283,284,5,42,0,0,284,288,1,0,0,0,285,287,
        9,0,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,289,1,0,0,0,288,286,
        1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,5,42,0,0,292,293,
        5,41,0,0,293,294,1,0,0,0,294,295,6,46,0,0,295,94,1,0,0,0,296,298,
        7,21,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,
        1,0,0,0,300,301,1,0,0,0,301,302,6,47,0,0,302,96,1,0,0,0,303,304,
        9,0,0,0,304,98,1,0,0,0,9,0,248,250,257,259,266,277,288,299,1,6,0,
        0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DIGIT = 1
    UPPERCASE = 2
    LOWERCASE = 3
    LETTER = 4
    DOT = 5
    AT = 6
    DIAC = 7
    TIMES = 8
    DIVIDE = 9
    PLUS = 10
    MINUS = 11
    LT = 12
    LE = 13
    EQUALS = 14
    ASSIGN = 15
    LPAR = 16
    RPAR = 17
    COLON = 18
    SEMICOLON = 19
    LBRACE = 20
    RBRACE = 21
    COMMA = 22
    LSQUARE = 23
    RSQUARE = 24
    SELF = 25
    SELF_TYPE = 26
    FALSE = 27
    TRUE = 28
    CLASS = 29
    ELSE = 30
    FI = 31
    IF = 32
    IN = 33
    INHERITS = 34
    ISVOID = 35
    LOOP = 36
    POOL = 37
    THEN = 38
    WHILE = 39
    NEW = 40
    NOT = 41
    LET = 42
    TYPE = 43
    ID = 44
    STRING = 45
    COMMENT = 46
    CLOSED_COMMENT = 47
    WHITESPACE = 48
    ERROR = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'@'", "'~'", "'*'", "'/'", "'+'", "'-'", "'<'", "'<='", 
            "'='", "'<-'", "'('", "')'", "':'", "';'", "'{'", "'}'", "','", 
            "'['", "']'", "'self'", "'SELF_TYPE'", "'false'", "'true'" ]

    symbolicNames = [ "<INVALID>",
            "DIGIT", "UPPERCASE", "LOWERCASE", "LETTER", "DOT", "AT", "DIAC", 
            "TIMES", "DIVIDE", "PLUS", "MINUS", "LT", "LE", "EQUALS", "ASSIGN", 
            "LPAR", "RPAR", "COLON", "SEMICOLON", "LBRACE", "RBRACE", "COMMA", 
            "LSQUARE", "RSQUARE", "SELF", "SELF_TYPE", "FALSE", "TRUE", 
            "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", 
            "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", "TYPE", "ID", 
            "STRING", "COMMENT", "CLOSED_COMMENT", "WHITESPACE", "ERROR" ]

    ruleNames = [ "DIGIT", "UPPERCASE", "LOWERCASE", "LETTER", "DOT", "AT", 
                  "DIAC", "TIMES", "DIVIDE", "PLUS", "MINUS", "LT", "LE", 
                  "EQUALS", "ASSIGN", "LPAR", "RPAR", "COLON", "SEMICOLON", 
                  "LBRACE", "RBRACE", "COMMA", "LSQUARE", "RSQUARE", "SELF", 
                  "SELF_TYPE", "FALSE", "TRUE", "CLASS", "ELSE", "FI", "IF", 
                  "IN", "INHERITS", "ISVOID", "LOOP", "POOL", "THEN", "WHILE", 
                  "NEW", "NOT", "LET", "TYPE", "ID", "STRING", "COMMENT", 
                  "CLOSED_COMMENT", "WHITESPACE", "ERROR" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


